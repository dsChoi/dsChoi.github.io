<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clean architecture on Call me Sam</title>
    <link>https://example.com/tags/clean-architecture/</link>
    <description>Recent content in clean architecture on Call me Sam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Nov 2019 22:10:29 +0000</lastBuildDate><atom:link href="https://example.com/tags/clean-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>clean-architecture-26-28</title>
      <link>https://example.com/posts/clean-architecture-26-27/</link>
      <pubDate>Sun, 17 Nov 2019 22:10:29 +0000</pubDate>
      
      <guid>https://example.com/posts/clean-architecture-26-27/</guid>
      <description>26 메인 컴포넌트&amp;nbsp;¶ 궁극전인 세부사항&amp;nbsp;¶ 문자열 초기화
public class Mian implements HtwMessageReceiver { private static HuntTheWumpus game; private static int hitPoints = 10; private static final List&amp;lt;String&amp;gt; caverns = new ArrayList&amp;lt;&amp;gt;(); private static final String[] environments = new String[] {&amp;#34;bright&amp;#34;, &amp;#34;humid&amp;#34;, &amp;#34;dry&amp;#34;, &amp;#34;creepy&amp;#34;, &amp;#34;ugly&amp;#34;, &amp;#34;foggy&amp;#34;, &amp;#34;hot&amp;#34;, &amp;#34;cold&amp;#34;, &amp;#34;drafty&amp;#34;, &amp;#34;dreadful&amp;#34;}; private static final String[] shapes = new String[] {&amp;#34;round&amp;#34;, &amp;#34;square&amp;#34;, &amp;#34;oval&amp;#34;, &amp;#34;irregualar&amp;#34;, &amp;#34;long&amp;#34;, &amp;#34;craggy&amp;#34;, &amp;#34;rough&amp;#34;, &amp;#34;tall&amp;#34;, &amp;#34;narrow&amp;#34;}; private static final String[] cavernTypes = new String[] {&amp;#34;cavern&amp;#34;, &amp;#34;room&amp;#34;, &amp;#34;chamber&amp;#34;.</description>
    </item>
    
    <item>
      <title>5부 아키텍처 22장 ~ 25장</title>
      <link>https://example.com/posts/clean-architecture-22-25/</link>
      <pubDate>Mon, 11 Nov 2019 20:11:19 +0000</pubDate>
      
      <guid>https://example.com/posts/clean-architecture-22-25/</guid>
      <description>22장 클린아키텍처&amp;nbsp;¶ 시스템 아키텍처와 관련된 여러가지 아이디어
 육각형 아키텍처 (Hexagonal Architecture) DCI(Data Context and Interaction) BCE (Boundary-Control-Entity)  위 아키텍처의 목표?
 관심사의 분리  소프트웨어를 계층으로 분리함으로써 관심사의 분리 목표를 달성 최소한 업무 규칙을 위한 계층과, 사용자와 시스템인터페이스를 위한 또 다른 계층 하나를 포함해야한다.    특성
 프레임워크 독립성 테스트 용이성 UI 독립성 데이터베이스 독립성 모든 외부 에이전시에 대한 독립성   참고 : https://medium.com/@erish/python-django-clean-architecture-%EC%97%B0%EA%B5%AC%ED%95%98%EA%B8%B0-591d7a555059  의존성 규칙&amp;nbsp;¶  소스코드 의존성은 반드시 안쪽으로, 고수준의 정책을 향해야 한다.</description>
    </item>
    
    <item>
      <title>5부 아키텍처 18장 ~ 21장</title>
      <link>https://example.com/posts/clean-architecture-18-20/</link>
      <pubDate>Sun, 03 Nov 2019 18:07:19 +0000</pubDate>
      
      <guid>https://example.com/posts/clean-architecture-18-20/</guid>
      <description>5부 아키텍처&amp;nbsp;¶ 18장 경계 해부학&amp;nbsp;¶  시스템 아키텍처는 일련의 소프트웨어 컴포넌트와 그 컴포넌트들을 분리하는 경계에 의해 정의된다.
 경계횡단하기&amp;nbsp;¶ &amp;lsquo;런타임에 경계를 횡단한다&amp;rsquo; 함은 경계 한쪽에 있는 기능에서 반대편 기능을 호출하여 데이터를 전달하는 일에 불과하다. 적절한 위치에서 경계를 횡단하게 하는 비결은 소스 코드 의존성 관리
why Source Code
소스 코드 모듈이 변경되면 의존하는 다른 소스 코드 모듈도 변경되거나, 다시 컴파일해서 새로 배포해야 할지도 모르기 때문.
경계는 이러한 변경이 전파되는 것을 막는 방화벽을 구축하고 관리하는 수단</description>
    </item>
    
    <item>
      <title>4부 컴포넌트 원칙</title>
      <link>https://example.com/posts/4_component_principle/</link>
      <pubDate>Mon, 21 Oct 2019 18:34:32 +0000</pubDate>
      
      <guid>https://example.com/posts/4_component_principle/</guid>
      <description>12. 컴포넌트&amp;nbsp;¶ 정의
 컴포넌트는 배포단위 시스템의 구성 요소로 배포할 수 있는 가장 작은 단위 Ex) java - jar, 루비 - gem, 닷넷 - dll, 인터프리터형 언어 - 소스 파일의 결합체, 모든 언어  컴포넌트의 간략한 역사&amp;nbsp;¶ * 200 TLS START, CLA TAD BUFR JMS GETSTR CLA TAD BUFR JMS, .... K177,	177 MCR, -15 *200 명령어는 메모리 주소 200에 로드할 코드를 생성하라고 컴파일러에 알려준다.
재배치성&amp;nbsp;¶ 재배치가 가능한 바이너리(relocatable binary)</description>
    </item>
    
    <item>
      <title>클린아키텍처 3부 설계원칙</title>
      <link>https://example.com/posts/2019-10-12-3%EB%B6%80_%EC%84%A4%EA%B3%84%EC%9B%90%EC%B9%99/</link>
      <pubDate>Sat, 12 Oct 2019 21:00:50 +0900</pubDate>
      
      <guid>https://example.com/posts/2019-10-12-3%EB%B6%80_%EC%84%A4%EA%B3%84%EC%9B%90%EC%B9%99/</guid>
      <description>3부 설계 원칙&amp;nbsp;¶ 좋은 소프트웨어는 깔끔한 코드clean code 에서 시작한다.
좋은 벽돌로 좋은 아키텍처를 정의하는 원칙이 필요함. 그것이 SOLID
SOLID 원칙의 목적은 중간 수준의 소프트웨어 구조가 아래와 같도록 만드는데 있다.
변경에 유연하다. 이해하기 쉽다. 많은 소프트웨어 시스템에 사용될 수 있는 컴포넌트의 기반이 된다.  중간 수준이란?&amp;nbsp;¶ 프로그래머가 이들 원칙을 모듈 수준에서 작업할 때 적용할 수 있다는 뜻.
코드 수준보다 조금 상위에서 적용되며 모듈과 컴포넌트 내부에서 사용되는 소프트웨어 구조를 정의</description>
    </item>
    
    <item>
      <title>클린아키텍처-2부 벽돌부터 시작하기: 프로그래밍 패러다임</title>
      <link>https://example.com/posts/2019-10-10-2%EB%B6%80_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84/</link>
      <pubDate>Thu, 10 Oct 2019 11:31:50 +0900</pubDate>
      
      <guid>https://example.com/posts/2019-10-10-2%EB%B6%80_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84/</guid>
      <description>2부 벽돌부터 시작하기: 프로그래밍 패러다임&amp;nbsp;¶ 3장 패러다임 개요&amp;nbsp;¶   구조적 프로그래밍
  패러다임
구조적 프로그래밍은 제어흐름의 전환에 대해 규칙을 부과한다.     객체 지향 프로그래밍
  사실 구조적 프로그램보다 2년 앞선 1966년에 등장
  패러다임
객체지향 프로그래밍은 제어흐름의 간접적인 전환에 대해 규칙을 부과한다.     함수형 프로그래밍
  최근 도입시작하긴했지만 세 패러다임중 가장 먼저 등장했다.
  1958년 존 매카시가 만든 람다 계산법</description>
    </item>
    
    <item>
      <title>클린아키텍처 1부 목차</title>
      <link>https://example.com/posts/2019-10-08-%ED%81%B4%EB%A6%B0%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98_%EB%AA%A9%EC%B0%A8/</link>
      <pubDate>Tue, 08 Oct 2019 11:50:50 +0900</pubDate>
      
      <guid>https://example.com/posts/2019-10-08-%ED%81%B4%EB%A6%B0%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98_%EB%AA%A9%EC%B0%A8/</guid>
      <description>1부 소개&amp;nbsp;¶ 1장 설계와 아키텍처란?&amp;nbsp;¶  목표는? 사례 연구 결론  2장 두 가지 가치에 대한 이야기&amp;nbsp;¶  행위 아키텍처 더 높은 가치 아이젠하워 매트릭스 아키텍처를 위해 투쟁하라   2부 벽돌부터 시작하기: 프로그래밍 패러다임&amp;nbsp;¶ 3장 패러다임 개요&amp;nbsp;¶  구조적 프로그래밍 객체 지향 프로그래밍 함수형 프로그래밍 생각할 거리 결론  4장 구조적 프로그래밍&amp;nbsp;¶  증명 해로운 성명서 기능적 분해 엄밀한 증명은 없었다 과학이 구출하다 테스트 결론  5장 객체 지향 프로그래밍&amp;nbsp;¶  캡슐화?</description>
    </item>
    
  </channel>
</rss>
